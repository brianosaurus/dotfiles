    debugger,V
,V
    debugger    controller.preserveAdGroup() if not ad_group.get('is_new'),V
https://adstage.atlassian.net/browse/AS-6397,v
10/16/2015,v
https://adstage.atlassian.net/browse/AS-6369,v
 style="width:40rem",v
      switch_spy = @sandbox.spy(@controller, 'switchAllBidding'),V
      changed_spy = @sandbox.spy(@controller, 'fieldChanged'),V
      Ember.run => @controller.set('model.bid_amount', '3.50'),V
        .to.eql('replace'),V
      expect(@controller.get('model.fieldInfo.bid_amount.bulkOperation')),V
        expect(@controller.get('model.fieldInfo.bid_amount.bulkOperation'))          .to.eql('keep')        expect(@controller.get(          'model.fieldInfo.optimization_goal.bulkOperation')).to.eql('keep')        expect(@controller.get('model.fieldInfo.billing_event.bulkOperation'))          .to.eql('keep')        expect(@controller.get('model.fieldInfo.is_autobid.bulkOperation'))          .to.eql('keep'),V
bid_amount,v
 ,v
        expect(@controller.get('model.fieldInfo.bid_amount.bulkOperation'))          .to.eql('keep'),V
      expect(switch_spy.callCount).to.eql(6),V
      expect(changed_spy.callCount).to.eql(1),V
      @controller.set('model.bid_amount', '3.00'),V
      @controller.set('model.fieldInfo.bid_amount.bulkOperation', 'keep'),V
      @controller.set('model.fieldInfo.is_autobid.bulkOperation', 'keep'),V
      @controller.set('model.fieldInfo.billing_event.bulkOperation', 'keep'),V
      @controller.set('model.fieldInfo.optimization_goal.bulkOperation', 'keep'),V
      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get('model.fieldInfo.bid_amount.bulkOperation'))          .to.eql('keep')        @controller.set('model.bid_amount', '3.00')      expect(@controller.get('model.fieldInfo.bid_amount.bulkOperation'))        .to.eql('replace')      Ember.run =>        @controller.set('model.bid_amount', '3.50')      expect(switch_spy.callCount).to.eql(1),V
to replace if one changes from replace,v
    it 'sets all bidding fields to replace if one changes from keep', ->      changed_spy = @sandbox.spy(@controller, 'fieldChanged')      switch_spy = @sandbox.spy(@controller, 'switchAllBidding')      @controller.set('model.fieldInfo.optimization_goal.bulkOperation', 'keep')      @controller.set('model.fieldInfo.billing_event.bulkOperation', 'keep')      @controller.set('model.fieldInfo.is_autobid.bulkOperation', 'keep')      @controller.set('model.fieldInfo.bid_amount.bulkOperation', 'keep')      @controller.set('model.bid_amount', '3.00')      expect(changed_spy.callCount).to.eql(1)      expect(switch_spy.callCount).to.eql(6)    it 'does not set all bidding fields to replace if one changes from replace', ->      changed_spy = @sandbox.spy(@controller, 'fieldChanged')      switch_spy = @sandbox.spy(@controller, 'switchAllBidding')      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get('model.fieldInfo.bid_amount.bulkOperation'))          .to.eql('keep')        @controller.set('model.bid_amount', '3.00')      expect(@controller.get('model.fieldInfo.bid_amount.bulkOperation'))        .to.eql('replace')      Ember.run =>        @controller.set('model.bid_amount', '3.50')      expect(switch_spy.callCount).to.eql(1),v
      expect(changed_spy.callCount).to.eql(2),V
0,v
        @controller.set('model.bid_amount', '3.00'),V
not.have.beenCalled,v
.callCount).to.eql(0),v
#,v
      # @controller.set('model.bid_amount', '3.00'),V
      # @controller.set('model.fieldInfo.bid_amount.bulkOperation', 'replace'),V
      # @controller.set('model.fieldInfo.is_autobid.bulkOperation', 'replace'),V
      # @controller.set('model.fieldInfo.billing_event.bulkOperation', 'replace'),V
      # @controller.set('model.fieldInfo.optimization_goal.bulkOperation', 'replace'),V
    console.error("#{property} -- #{value}"),V
 @controller.set('selected_entities',[{},{}]),v
.,v
l,v
e,v
d,v
o,v
m,v
element,v
    pry = require('pryjs')    eval(pry.it),V
append,v
        @controller.set('model.bid_amount','2.00'),V
a,v
n,v
        @controller.set('model.name','foo'),V
NONE,v
billing_event,v
optimization_goal,v
],v
},v
{,v
,,v
[,v
selected_entities,v
      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get('fieldInfo.name.bulkOperation')).to.eql('keep')        @controller.set('model.name','foo')      expect(@controller.get('fieldInfo.name.bulkOperation')).to.eql('append'),V
      pry = require('pryjs')      eval(pry.it),V
    pry = require('pryjs')    eval(pry.it),V
    console.error("#{property} - #{value}"),V
log,v
    it 'switches non-target fields', ->      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get('fieldInfo.name.bulkOperation')).to.eql('keep')        @controller.set('model.name','foo')      expect(@controller.get('fieldInfo.name.bulkOperation')).to.eql('append')    it 'switches non-target fields that need renaming', ->      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get('model.fieldInfo.daily_budget.bulkOperation'))          .to.eql('keep')        @controller.set('model.budget',123)        expect(@controller.get('model.fieldInfo.daily_budget.bulkOperation'))          .to.eql('replace')    it 'switches target fields that needs renaming', ->      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get(          'network_target.fieldInfo.age_max.bulkOperation')).to.eql('keep')        expect(@controller.get(          'network_target.fieldInfo.age_min.bulkOperation')).to.eql('keep')        @controller.set('model.network_target.age_max',55)        expect(@controller.get(          'network_target.fieldInfo.age_min.bulkOperation')).to.eql('replace')        expect(@controller.get(          'network_target.fieldInfo.age_max.bulkOperation')).to.eql('replace')    it 'switches target fields', ->      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get(          'network_target.fieldInfo.countries.bulkOperation')).to.eql('keep')        @controller.set('model.network_target.countries',['US','GB'])      expect(@controller.get('network_target.fieldInfo.countries.bulkOperation')).to.eql('append')    it 'switches flex fields', ->      Ember.run =>        @controller.set('model',FbAdgroup.create())        @controller.set('selected_entities',[{},{}])        expect(@controller.get(          'network_target.fieldInfo.interests_flex.bulkOperation'))            .to.eql('keep')        @controller.set(          'model.network_target.flexible_spec_fields.interests.items',          [['foo'],['bar']])        expect(@controller.get(          'network_target.fieldInfo.interests_flex.bulkOperation'))            .to.eql('replace')  describe 'checkEditable', ->    it 'notifies and closes modal if all are uneditable', ->      @controller.set('selected_entities',        [{uneditable: true},{uneditable: true}])      @controller.checkEditable()      expect(@ui_notifications.facebookUneditableError).to.have.been.called    it 'notifies and closes modal if any are uneditable', ->      @controller.set('selected_entities',        [{uneditable: true},{uneditable: false}])      @controller.checkEditable()      expect(@ui_notifications.facebookUneditableError).to.have.been.called    it 'doesnt do anything if all are editable', ->      @controller.set('selected_entities',        [{uneditable: false},{uneditable: false}])      spy = @sandbox.stub(@controller,'loadCampaignAndAccount')      @controller.checkEditable()      expect(@ui_notifications.facebookUneditableError).to.not.have.been.called      expect(spy).to.have.been.called  describe 'loadCampaignAndAccount', ->    it 'doesnt do anything if a campaign is set', ->      Ember.run =>        @controller.set('campaign',FbCampaign.create())        @controller.loadCampaignAndAccount()      expect(@loaders.toggleFullPageLoaderState).to.not.have.been.called    it 'doesnt do anything if there is no adgroup', ->      Ember.run =>        @controller.set('campaign',null)        @controller.set('selected_entities',[])        @controller.loadCampaignAndAccount()      expect(@loaders.toggleFullPageLoaderState).to.not.have.been.called    it 'loads in a campaign and account', ->      @controller.set('campaign',null)      @controller.set('selected_entities',[FbAdgroup.create()])      adgroup = FbAdgroup.create()      campaign = FbCampaign.create()      adgroup_load_spy = @sandbox.stub(adgroup,'populate_from_resource')      campaign_load_spy = @sandbox.stub(campaign,'populate_from_resource')      campaign_reload_spy = @sandbox.stub(campaign,'reload', -> promise())      adgroup.set('_api',{embedded: 'adstage:network_campaign': {}})      @sandbox.stub(FbAdgroup,'create', -> adgroup)      @sandbox.stub(FbCampaign,'create', -> campaign)      Ember.run =>        @controller.loadCampaignAndAccount()      expect(@loaders.toggleFullPageLoaderState).to.have.been.called      expect(adgroup_load_spy).to.have.been.called      expect(campaign_load_spy).to.have.been.called      expect(campaign_reload_spy).to.have.been.called      expect(@controller.get('campaign')).to.not.be.null,V
    eval(pry.it),V
    pry = require('pryjs'),V
  describe '#defineProperties', ->    it 'sets up the controller', ->      Ember.run =>        @controller.defineProperties()      expect(@controller.get('autocomplete_url')).to.be      expect(@controller.get('selected_entities')).to.eql([])      expect(@controller.get('model')).to.be  describe '#setupBulkEdit', ->    it 'sets up a new bulk edit state', ->      Ember.run =>        @controller.setupBulkEdit()      expect(@tracking.trackEvent).to.have.been.called      expect(@controller.get('selected_entities')).to.eql([])      expect(@controller.get('model')).to.be      expect(@controller.get('model.network_target')).to.be  describe '#setSingleModelCallback', ->    it 'calls populate_from_resource and load the account', ->      adgroup = FbAdgroup.create()      campaign = FbCampaign.create()      adgroup_load_spy = @sandbox.stub(adgroup,'populate_from_resource')      campaign_load_spy = @sandbox.stub(campaign,'populate_from_resource')      campaign_reload_spy = @sandbox.stub(campaign,'reload', -> promise())      adgroup.set('_api',{embedded: 'adstage:network_campaign': {}})      @sandbox.stub(FbAdgroup,'create', -> adgroup)      @sandbox.stub(FbCampaign,'create', -> campaign)      Ember.run =>        @controller.setSingleModelCallback({props: {remote_id: 'foo'}})      expect(adgroup_load_spy).to.have.been.called      expect(campaign_load_spy).to.have.been.called      expect(campaign_reload_spy).to.have.been.called    it 'returns and notifies if the adgroup is uneditable', ->      adgroup = FbAdgroup.create        uneditable: true      adgroup_load_spy = @sandbox.stub(adgroup,'populate_from_resource')      @sandbox.stub(FbAdgroup,'create', -> adgroup)      Ember.run =>        @controller.setSingleModelCallback({props: {remote_id: 'foo'}})      expect(adgroup_load_spy).to.have.been.called      expect(@ui_notifications.facebookUneditableError).to.have.been.called  describe '#setMultipleModelCallback', ->    it 'sets a new model and calls resetBulkSchema', ->      Ember.run =>        @controller.setMultipleModelCallback()      expect(@controller.get('model.remote_id')).to.be.null  describe '#prepareSchema', ->    it 'sets up mobile targeting', ->      adgroup = FbAdgroup.create()      adgroup.set('network_target.mobile.user_os','ios')      adgroup.set('network_target.selected_placements',['mobile_news_feed'])      adgroup.set('network_target.fieldInfo.mobile_targeting.bulkAction',        'replace')      Ember.run =>        @controller.set('model',adgroup)      schema = @controller.prepareSchema()      expect(schema['user_os']).to.deep.eql(({replace: 'ios'}))    it 'sets up bidding rules', ->      adgroup = FbAdgroup.create()      @controller.set('is_bulk_edit', true)      adgroup.set('is_autobid', false)      adgroup.set('bid_amount',11)      adgroup.set('optimization_goal', 'PAGE_ENGAGEMENT')      adgroup.set('billing_event', 'LINK_CLICKS')      Ember.run =>        @controller.set('model',adgroup)      schema = @controller.prepareSchema()      expect(schema['bid_amount']).to.deep.eql(({replace: 11}))      expect(schema['optimization_goal']).to.deep.eql(        ({replace: 'PAGE_ENGAGEMENT'}))      expect(schema['billing_event']).to.deep.eql(({replace: 'LINK_CLICKS'}))    it 'will make a null bid_amount if is_autobid', ->      adgroup = FbAdgroup.create()      @controller.set('is_bulk_edit', true)      adgroup.set('is_autobid', true)      adgroup.set('bid_amount',11)      adgroup.set('optimization_goal', 'PAGE_ENGAGEMENT')      adgroup.set('billing_event', 'LINK_CLICKS')      Ember.run =>        @controller.set('model',adgroup)      schema = @controller.prepareSchema()      expect(schema['bid_amount']).to.deep.eql(({replace: null}))    it 'sets up and/or', ->      adgroup = FbAdgroup.create()      adgroup.set('network_target.fieldInfo.behaviors_flex.bulkOperation',        'replace')      Ember.run =>        @controller.set('model',adgroup)      schema = @controller.prepareSchema()      expect(Object.keys(schema['flexible_spec'])[0]).to.eql('replace')      expect(schema['behaviors']).to.deep.eql(({replace: []})),V
not.have.been.called,v
s,v
have.callCount,v
t,v
u,v
C,v
c,v
v,v
h,v
http://store.steelcase.com/seating/office-desk-chairs/leap,v
',v
),v
(,v
callCount(6),v
keep,v
      changed_spy = @sandbox.spy(@controller, 'fieldChanged')      switch_spy = @sandbox.spy(@controller, 'switchAllBidding')      @controller.set('model.fieldInfo.optimization_goal.bulkOperation', 'keep')      @controller.set('model.fieldInfo.billing_event.bulkOperation', 'keep')      @controller.set('model.fieldInfo.is_autobid.bulkOperation', 'keep')      @controller.set('model.fieldInfo.bid_amount.bulkOperation', 'keep')      expect(changed_spy).to.have.callCount(6)      expect(switch_spy).to.have.callCount(6),V
been.called,v
b,v
changed_spy,v
      expect(changed_spy).to.have.been.called,V
Since = (startTime) -> (generated) ->,v
fieldChanged,v
fieldChangedSpy,v
@,v
sets,v
    it 'sets all bidding fields to replace if one changes from keep', ->,V
https://github.com/AdStage/adstage-platform-v2/pull/2379#discussion_r42058330,v
    console.log("#{property} - #{value} - #{element}"),V
      action = @get("model.fieldInfo.#{property.substring(6)}.bulkOperation"),V
      debugger,V
